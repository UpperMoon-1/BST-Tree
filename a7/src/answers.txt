/**
 * -------------------------------------
 * @file  tree.c
 * file description
 * -------------------------------------
 * @author Giuseppe Akbari, 169057752, akba7752@mylaurier.ca
 *
 * @version 2025-03-01
 *
 * -------------------------------------
 */

#include <stdio.h>
#include <stdlib.h>
#include "queue_stack.h"
#include "tree.h"

TPROPS tree_property(TNODE *root) {
// your code
	TPROPS r = { 0 };
	if (root != NULL) {
		TPROPS lp = tree_property(root->left);

		TPROPS rp = tree_property(root->right);

		r.order += lp.order + rp.order + 1;
		if (lp.height > rp.height) {
			r.height = lp.height + 1;
		} else {
			r.height = rp.height + 1;
		}
	}
	return r;
}

void preorder(TNODE *root) {
// your code
	if (root != NULL) {
		printf("%c ", root->data);
		preorder(root->left);
		preorder(root->right);
	}
	return;

}

void inorder(TNODE *root) {
// your code
	if (root != NULL) {
		inorder(root->left);
		printf("%c ", root->data);
		inorder(root->right);
	}
	return;
}

void postorder(TNODE *root) {
// your code
	if (root != NULL) {
		postorder(root->left);
		postorder(root->right);
		printf("%c ", root->data);
	}
}

void bforder(TNODE *root) {
// your code
	QUEUE queue = { 0 };
	enqueue(&queue, root);

	while (queue.front != NULL) {
		TNODE *current = (TNODE*) dequeue(&queue);
		printf("%c ", current->data);
		if (current->left != NULL) {
			enqueue(&queue, current->left);
		}
		if (current->right != NULL) {
			enqueue(&queue, current->right);
		}
	}
	clean_queue(&queue);

	return;
}

TNODE* bfs(TNODE *root, char val) {
// your code
	TNODE *t = NULL;

	if (root) {
		QUEUE queue = { 0 };
		enqueue(&queue, root);
		while (queue.front != NULL) {
			TNODE *tnp = (TNODE*) dequeue(&queue);
			if (tnp->data == val) {
				t = tnp;
				return t;
			}
			if (tnp->left != NULL) {
				enqueue(&queue, tnp->left);
			}
			if (tnp->right != NULL) {
				enqueue(&queue, tnp->right);
			}
		}
		clean_queue(&queue);
	}

	return t;
}

TNODE* dfs(TNODE *root, char val) {
// your code
	TNODE *t = NULL;

	if (root != NULL) {
		STACK stack = { 0 };
		push(&stack, root);
		while (stack.top != NULL) {
			TNODE *p = (TNODE*) pop(&stack);
			if (p->data == val) {
				t = p;
				return t;
			}
			if (p->left != NULL) {
				push(&stack, p->left);
			}
			if (p->right != NULL) {
				push(&stack, p->right);
			}
		}
		clean_stack(&stack);
	}

	return t;
}
// the following functions are given, need to add to your program.
/*
 TNODE* new_node(char val) {
 TNODE *np = (TNODE*) malloc(sizeof(TNODE));
 if (np != NULL) {
 np->data = val;
 np->left = NULL;
 np->right = NULL;
 }
 return np;
 }
 */
void clean_tree(TNODE **rootp) {
	TNODE *p = *rootp;
	if (p) {
		if (p->left)
			clean_tree(&p->left);
		if (p->right)
			clean_tree(&p->right);
		free(p);
	}
	*rootp = NULL;
}

void insert_tree(TNODE **rootp, char val) {
	if (*rootp == NULL) {
		*rootp = new_node(val);
	} else {
		QUEUE queue = { 0 };
		TNODE *p;
		enqueue(&queue, *rootp);
		while (queue.front) {
			p = dequeue(&queue);
			if (p->left == NULL) {
				p->left = new_node(val);
				break;
			} else {
				enqueue(&queue, p->left);
			}

			if (p->right == NULL) {
				p->right = new_node(val);
				break;
			} else {
				enqueue(&queue, p->right);
			}
		}
	}
}
